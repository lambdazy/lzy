# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: lzy/proto/priv/v1/lzy-subject-service.proto, lzy/proto/priv/v1/lzy-access-service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
import grpclib

from lzy.proto.bet import v1


@dataclass
class CreateSubjectRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    auth_provider: str = betterproto.string_field(2)
    provider_subject_id: str = betterproto.string_field(3)


@dataclass
class RemoveSubjectRequest(betterproto.Message):
    subject: v1.Subject = betterproto.message_field(1)


@dataclass
class RemoveSubjectResponse(betterproto.Message):
    pass


@dataclass
class AddCredentialsRequest(betterproto.Message):
    subject: v1.Subject = betterproto.message_field(1)
    credentials: v1.Credentials = betterproto.message_field(2)


@dataclass
class AddCredentialsResponse(betterproto.Message):
    pass


@dataclass
class RemoveCredentialsRequest(betterproto.Message):
    subject: v1.Subject = betterproto.message_field(1)
    credentials_name: str = betterproto.string_field(2)


@dataclass
class RemoveCredentialsResponse(betterproto.Message):
    pass


@dataclass
class AuthorizeRequest(betterproto.Message):
    subject: v1.Subject = betterproto.message_field(1)
    permission: str = betterproto.string_field(2)
    resource: v1.Resource = betterproto.message_field(3)


class LzySubjectServiceStub(betterproto.ServiceStub):
    async def create_subject(
        self, *, name: str = "", auth_provider: str = "", provider_subject_id: str = ""
    ) -> v1.Subject:
        request = CreateSubjectRequest()
        request.name = name
        request.auth_provider = auth_provider
        request.provider_subject_id = provider_subject_id

        return await self._unary_unary(
            "/lzy.proto.priv.v1.LzySubjectService/CreateSubject",
            request,
            v1.Subject,
        )

    async def remove_subject(
        self, *, subject: Optional[v1.Subject] = None
    ) -> RemoveSubjectResponse:
        request = RemoveSubjectRequest()
        if subject is not None:
            request.subject = subject

        return await self._unary_unary(
            "/lzy.proto.priv.v1.LzySubjectService/RemoveSubject",
            request,
            RemoveSubjectResponse,
        )

    async def add_credentials(
        self,
        *,
        subject: Optional[v1.Subject] = None,
        credentials: Optional[v1.Credentials] = None,
    ) -> AddCredentialsResponse:
        request = AddCredentialsRequest()
        if subject is not None:
            request.subject = subject
        if credentials is not None:
            request.credentials = credentials

        return await self._unary_unary(
            "/lzy.proto.priv.v1.LzySubjectService/AddCredentials",
            request,
            AddCredentialsResponse,
        )

    async def remove_credentials(
        self, *, subject: Optional[v1.Subject] = None, credentials_name: str = ""
    ) -> RemoveCredentialsResponse:
        request = RemoveCredentialsRequest()
        if subject is not None:
            request.subject = subject
        request.credentials_name = credentials_name

        return await self._unary_unary(
            "/lzy.proto.priv.v1.LzySubjectService/RemoveCredentials",
            request,
            RemoveCredentialsResponse,
        )


class LzyAccessServiceStub(betterproto.ServiceStub):
    async def authorize(
        self,
        *,
        subject: Optional[v1.Subject] = None,
        permission: str = "",
        resource: Optional[v1.Resource] = None,
    ) -> v1.Subject:
        request = AuthorizeRequest()
        if subject is not None:
            request.subject = subject
        request.permission = permission
        if resource is not None:
            request.resource = resource

        return await self._unary_unary(
            "/lzy.proto.priv.v1.LzyAccessService/Authorize",
            request,
            v1.Subject,
        )
