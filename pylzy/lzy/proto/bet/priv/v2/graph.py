# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: lzy/proto/priv/v2/graph/lzy-graph-executor.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

import lzy.proto.bet.priv.v2 as v2


@dataclass
class TaskDesc(betterproto.Message):
    id: str = betterproto.string_field(1)
    zygote: v2.Zygote = betterproto.message_field(2)
    slot_assignments: List["SlotToChannelAssignment"] = betterproto.message_field(3)


@dataclass
class SlotToChannelAssignment(betterproto.Message):
    slot_name: str = betterproto.string_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass
class TaskExecutionStatus(betterproto.Message):
    task_description_id: str = betterproto.string_field(1)
    progress: "TaskStatus" = betterproto.message_field(2)


@dataclass
class TaskStatus(betterproto.Message):
    pass


@dataclass
class GraphExecutionStatus(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    graph_id: str = betterproto.string_field(2)
    waiting: "GraphExecutionStatusWaiting" = betterproto.message_field(
        3, group="status"
    )
    executing: "GraphExecutionStatusExecuting" = betterproto.message_field(
        4, group="status"
    )
    completed: "GraphExecutionStatusCompleted" = betterproto.message_field(
        5, group="status"
    )
    failed: "GraphExecutionStatusFailed" = betterproto.message_field(6, group="status")


@dataclass
class GraphExecutionStatusWaiting(betterproto.Message):
    pass


@dataclass
class GraphExecutionStatusExecuting(betterproto.Message):
    executing_tasks: List["TaskExecutionStatus"] = betterproto.message_field(1)


@dataclass
class GraphExecutionStatusCompleted(betterproto.Message):
    pass


@dataclass
class GraphExecutionStatusFailed(betterproto.Message):
    description: str = betterproto.string_field(1)


@dataclass
class ChannelDesc(betterproto.Message):
    id: str = betterproto.string_field(1)
    direct: "ChannelDescDirectChannel" = betterproto.message_field(2, group="type")


@dataclass
class ChannelDescDirectChannel(betterproto.Message):
    """Channel types"""

    pass


@dataclass
class GraphExecuteRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    tasks: List["TaskDesc"] = betterproto.message_field(2)
    parent_graph_id: str = betterproto.string_field(3)
    channels: List["ChannelDesc"] = betterproto.message_field(4)


@dataclass
class GraphExecuteResponse(betterproto.Message):
    status: "GraphExecutionStatus" = betterproto.message_field(1)


@dataclass
class GraphStatusRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    graph_id: str = betterproto.string_field(2)


@dataclass
class GraphStatusResponse(betterproto.Message):
    status: "GraphExecutionStatus" = betterproto.message_field(1)


@dataclass
class GraphStopRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)
    graph_id: str = betterproto.string_field(2)
    issue: str = betterproto.string_field(3)


@dataclass
class GraphStopResponse(betterproto.Message):
    status: "GraphExecutionStatus" = betterproto.message_field(1)


@dataclass
class GraphListRequest(betterproto.Message):
    workflow_id: str = betterproto.string_field(1)


@dataclass
class GraphListResponse(betterproto.Message):
    graphs: List["GraphExecutionStatus"] = betterproto.message_field(1)


class GraphExecutorStub(betterproto.ServiceStub):
    async def execute(
        self,
        *,
        workflow_id: str = "",
        tasks: List["TaskDesc"] = [],
        parent_graph_id: str = "",
        channels: List["ChannelDesc"] = [],
    ) -> GraphExecuteResponse:
        request = GraphExecuteRequest()
        request.workflow_id = workflow_id
        if tasks is not None:
            request.tasks = tasks
        request.parent_graph_id = parent_graph_id
        if channels is not None:
            request.channels = channels

        return await self._unary_unary(
            "/lzy.proto.priv.v2.graph.GraphExecutor/Execute",
            request,
            GraphExecuteResponse,
        )

    async def status(
        self, *, workflow_id: str = "", graph_id: str = ""
    ) -> GraphStatusResponse:
        request = GraphStatusRequest()
        request.workflow_id = workflow_id
        request.graph_id = graph_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.graph.GraphExecutor/Status",
            request,
            GraphStatusResponse,
        )

    async def stop(
        self, *, workflow_id: str = "", graph_id: str = "", issue: str = ""
    ) -> GraphStopResponse:
        request = GraphStopRequest()
        request.workflow_id = workflow_id
        request.graph_id = graph_id
        request.issue = issue

        return await self._unary_unary(
            "/lzy.proto.priv.v2.graph.GraphExecutor/Stop",
            request,
            GraphStopResponse,
        )

    async def list(self, *, workflow_id: str = "") -> GraphListResponse:
        request = GraphListRequest()
        request.workflow_id = workflow_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.graph.GraphExecutor/List",
            request,
            GraphListResponse,
        )
