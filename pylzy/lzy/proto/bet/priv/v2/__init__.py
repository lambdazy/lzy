# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: lzy/proto/priv/v2/lzy-auth.proto, lzy/proto/priv/v2/lzy-zygote.proto, lzy/proto/priv/v2/lzy-task.proto, lzy/proto/priv/v2/lzy-servant.proto, lzy/proto/priv/v2/lzy-channel.proto, lzy/proto/priv/v2/lzy-backoffice.proto, lzy/proto/priv/v2/lzy-fs.proto, lzy/proto/priv/v2/lzy-workflow.proto, lzy/proto/priv/v2/lzy-whiteboard.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, List, Optional

import betterproto
import grpclib


class SchemeType(betterproto.Enum):
    plain = 0
    proto = 1
    cloudpickle = 2


class SlotMedia(betterproto.Enum):
    FILE = 0
    PIPE = 1
    ARG = 3


class SlotDirection(betterproto.Enum):
    INPUT = 0
    OUTPUT = 1


class SlotStatusState(betterproto.Enum):
    UNBOUND = 0
    PREPARING = 1
    OPEN = 2
    SUSPENDED = 3
    CLOSED = 4
    DESTROYED = 5


class TaskSignalSIGType(betterproto.Enum):
    NONE = 0
    KILL = 9


class TaskProgressStatus(betterproto.Enum):
    UNKNOWN = 0
    QUEUE = 1
    PREPARING = 2
    EXECUTING = 3
    SUCCESS = 4
    ERROR = 5


class StateChangedState(betterproto.Enum):
    PREPARING = 0
    CONNECTED = 1
    RUNNING = 2
    SUSPENDED = 3
    FINISHED = 4
    DESTROYED = 5


class ServantStatusStatus(betterproto.Enum):
    STARTED = 0
    REGISTERING = 1
    REGISTERED = 2
    PREPARING_EXECUTION = 3
    EXECUTING = 4


class BindingStatus(betterproto.Enum):
    OK = 0
    FAILED = 1


class OAuthProviders(betterproto.Enum):
    GITHUB = 0


class CheckSessionResponseSessionStatus(betterproto.Enum):
    EXISTS = 0
    WRONG_USER = 1
    NOT_RELATED_WITH_USER = 2
    NOT_EXISTS = 3


class SlotCommandStatusRCCode(betterproto.Enum):
    SUCCESS = 0
    ERROR = 1


class MessageControls(betterproto.Enum):
    EOS = 0


class WhiteboardStatus(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    COMPLETED = 2
    NOT_COMPLETED = 3
    ERRORED = 4


class OperationStatusStatus(betterproto.Enum):
    OK = 0
    FAILED = 1


class WhiteboardFieldStatus(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    IN_PROGRESS = 2
    FINISHED = 3
    ERRORED = 4


class EntryStatusResponseStatus(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    IN_PROGRESS = 2
    FINISHED = 3
    ERRORED = 4


@dataclass
class UserCredentials(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    token: str = betterproto.string_field(2)


@dataclass
class TaskCredentials(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    servant_id: str = betterproto.string_field(2)
    servant_token: str = betterproto.string_field(3)


@dataclass
class Auth(betterproto.Message):
    user: "UserCredentials" = betterproto.message_field(1, group="credentials")
    task: "TaskCredentials" = betterproto.message_field(2, group="credentials")


@dataclass
class Empty(betterproto.Message):
    pass


@dataclass
class Zygote(betterproto.Message):
    # TODO: return uri back
    env: "EnvSpec" = betterproto.message_field(1)
    provisioning: "Provisioning" = betterproto.message_field(2)
    fuze: str = betterproto.string_field(3)
    slots: List["Slot"] = betterproto.message_field(4)
    description: str = betterproto.string_field(5)
    name: str = betterproto.string_field(6)


@dataclass
class ZygoteList(betterproto.Message):
    zygote: List["Zygote"] = betterproto.message_field(1)


@dataclass
class DataScheme(betterproto.Message):
    type: str = betterproto.string_field(1)
    scheme_type: "SchemeType" = betterproto.enum_field(2)


@dataclass
class Slot(betterproto.Message):
    name: str = betterproto.string_field(1)
    media: "SlotMedia" = betterproto.enum_field(2)
    direction: "SlotDirection" = betterproto.enum_field(4)
    content_type: "DataScheme" = betterproto.message_field(3)


@dataclass
class SlotStatus(betterproto.Message):
    user: str = betterproto.string_field(1)
    task_id: str = betterproto.string_field(2)
    declaration: "Slot" = betterproto.message_field(3)
    connected_to: str = betterproto.string_field(4)
    pointer: int = betterproto.uint64_field(5)
    state: "SlotStatusState" = betterproto.enum_field(6)


@dataclass
class EnvSpec(betterproto.Message):
    base_env: "BaseEnv" = betterproto.message_field(1)
    aux_env: "AuxEnv" = betterproto.message_field(2)


@dataclass
class BaseEnv(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class AuxEnv(betterproto.Message):
    pyenv: "PythonEnv" = betterproto.message_field(1, group="env")


@dataclass
class PythonEnv(betterproto.Message):
    name: str = betterproto.string_field(1)
    yaml: str = betterproto.string_field(2)
    local_modules: List["LocalModule"] = betterproto.message_field(3)


@dataclass
class LocalModule(betterproto.Message):
    name: str = betterproto.string_field(1)
    uri: str = betterproto.string_field(2)


@dataclass
class Provisioning(betterproto.Message):
    tags: List["ProvisioningTag"] = betterproto.message_field(1)


@dataclass
class ProvisioningTag(betterproto.Message):
    tag: str = betterproto.string_field(1)


@dataclass
class TaskCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    tid: str = betterproto.string_field(2)
    signal: "TaskSignal" = betterproto.message_field(4, group="command")
    state: "TaskState" = betterproto.message_field(5, group="command")


@dataclass
class SlotMapping(betterproto.Message):
    slot_name: str = betterproto.string_field(1)
    entry_id: str = betterproto.string_field(2)


@dataclass
class SnapshotMeta(betterproto.Message):
    mappings: List["SlotMapping"] = betterproto.message_field(1)


@dataclass
class TaskSpec(betterproto.Message):
    tid: str = betterproto.string_field(1)
    auth: "Auth" = betterproto.message_field(2)
    zygote: "Zygote" = betterproto.message_field(3)
    assignments: List["SlotAssignment"] = betterproto.message_field(4)


@dataclass
class TaskSignal(betterproto.Message):
    sig: "TaskSignalSIGType" = betterproto.enum_field(1)


@dataclass
class TaskState(betterproto.Message):
    pass


@dataclass
class SlotAssignment(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot: "Slot" = betterproto.message_field(2)
    binding: str = betterproto.string_field(3)


@dataclass
class TaskStatus(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    owner: str = betterproto.string_field(2)
    status: "TaskProgressStatus" = betterproto.enum_field(3)
    servant: str = betterproto.string_field(4)
    connections: List["SlotStatus"] = betterproto.message_field(5)
    explanation: str = betterproto.string_field(6)
    zygote: "Zygote" = betterproto.message_field(7)


@dataclass
class TasksList(betterproto.Message):
    tasks: List["TaskStatus"] = betterproto.message_field(1)


@dataclass
class TaskProgress(betterproto.Message):
    tid: str = betterproto.string_field(1)
    status: "TaskProgressStatus" = betterproto.enum_field(2)
    description: str = betterproto.string_field(3)
    rc: int = betterproto.int32_field(4)
    zygote_name: str = betterproto.string_field(5)


@dataclass
class ContextSpec(betterproto.Message):
    env: "EnvSpec" = betterproto.message_field(1)
    provisioning: "Provisioning" = betterproto.message_field(2)
    assignments: List["SlotAssignment"] = betterproto.message_field(3)


@dataclass
class SlotSpec(betterproto.Message):
    slot: "Slot" = betterproto.message_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass
class ServantProgress(betterproto.Message):
    start: "Started" = betterproto.message_field(1, group="status")
    changed: "StateChanged" = betterproto.message_field(2, group="status")
    attach: "SlotAttach" = betterproto.message_field(3, group="status")
    detach: "SlotDetach" = betterproto.message_field(4, group="status")
    execute_start: "ExecutionStarted" = betterproto.message_field(5, group="status")
    execute_stop: "ExecutionConcluded" = betterproto.message_field(6, group="status")
    communication_completed: "CommunicationCompleted" = betterproto.message_field(
        7, group="status"
    )
    failed: "Failed" = betterproto.message_field(8, group="status")
    concluded: "Concluded" = betterproto.message_field(9, group="status")


@dataclass
class ExecutionStarted(betterproto.Message):
    pass


@dataclass
class Started(betterproto.Message):
    pass


@dataclass
class Failed(betterproto.Message):
    pass


@dataclass
class Concluded(betterproto.Message):
    pass


@dataclass
class CommunicationCompleted(betterproto.Message):
    pass


@dataclass
class EnvResult(betterproto.Message):
    description: str = betterproto.string_field(1)
    rc: int = betterproto.int32_field(2)


@dataclass
class StateChanged(betterproto.Message):
    new_state: "StateChangedState" = betterproto.enum_field(1)
    tid: str = betterproto.string_field(2)


@dataclass
class SlotAttach(betterproto.Message):
    slot: "Slot" = betterproto.message_field(1)
    uri: str = betterproto.string_field(2)
    channel: str = betterproto.string_field(3)


@dataclass
class SlotDetach(betterproto.Message):
    slot: "Slot" = betterproto.message_field(1)
    uri: str = betterproto.string_field(2)


@dataclass
class ExecutionConcluded(betterproto.Message):
    rc: int = betterproto.int32_field(1)
    description: str = betterproto.string_field(2)


@dataclass
class ServantStatus(betterproto.Message):
    status: "ServantStatusStatus" = betterproto.enum_field(1)
    connections: List["SlotStatus"] = betterproto.message_field(2)


@dataclass
class Channel(betterproto.Message):
    channel_id: str = betterproto.string_field(1)
    content_type: "DataScheme" = betterproto.message_field(2)


@dataclass
class ChannelCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    channel_name: str = betterproto.string_field(2)
    create: "ChannelCreate" = betterproto.message_field(3, group="command")
    destroy: "ChannelDestroy" = betterproto.message_field(4, group="command")
    state: "ChannelState" = betterproto.message_field(5, group="command")


@dataclass
class DirectChannelSpec(betterproto.Message):
    pass


@dataclass
class SnapshotChannelSpec(betterproto.Message):
    snapshot_id: str = betterproto.string_field(1)
    entry_id: str = betterproto.string_field(2)


@dataclass
class ChannelCreate(betterproto.Message):
    content_type: "DataScheme" = betterproto.message_field(1)
    direct: "DirectChannelSpec" = betterproto.message_field(2, group="type")
    snapshot: "SnapshotChannelSpec" = betterproto.message_field(3, group="type")


@dataclass
class ChannelDestroy(betterproto.Message):
    pass


@dataclass
class ChannelState(betterproto.Message):
    pass


@dataclass
class BindRequest(betterproto.Message):
    auth: "TaskCredentials" = betterproto.message_field(1)
    channel_id: str = betterproto.string_field(2)
    slot_name: str = betterproto.string_field(3)
    offset: str = betterproto.string_field(4)


@dataclass
class Binding(betterproto.Message):
    status: "BindingStatus" = betterproto.enum_field(1)


@dataclass
class ChannelStatus(betterproto.Message):
    channel: "Channel" = betterproto.message_field(1)
    connected: List["SlotStatus"] = betterproto.message_field(2)


@dataclass
class ChannelStatusList(betterproto.Message):
    statuses: List["ChannelStatus"] = betterproto.message_field(1)


@dataclass
class OpenChannelRequest(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    channel_id: str = betterproto.string_field(2)


@dataclass
class AddKeyRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    user_credentials: "BackofficeUserCredentials" = betterproto.message_field(2)
    public_key: str = betterproto.string_field(3)
    key_name: str = betterproto.string_field(4)


@dataclass
class User(betterproto.Message):
    user_id: str = betterproto.string_field(1)


@dataclass
class CreateUserRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    creator_credentials: "BackofficeUserCredentials" = betterproto.message_field(2)
    user: "User" = betterproto.message_field(3)


@dataclass
class DeleteUserRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    deleter_credentials: "BackofficeUserCredentials" = betterproto.message_field(2)
    user_id: str = betterproto.string_field(3)


@dataclass
class ListUsersRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    caller_credentials: "BackofficeUserCredentials" = betterproto.message_field(2)


@dataclass
class ListUsersResponse(betterproto.Message):
    users: List["User"] = betterproto.message_field(1)


@dataclass
class DeleteUserResult(betterproto.Message):
    pass


@dataclass
class CreateUserResult(betterproto.Message):
    pass


@dataclass
class AddKeyResult(betterproto.Message):
    pass


@dataclass
class BackofficeUserCredentials(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    session_id: str = betterproto.string_field(2)


@dataclass
class GenerateSessionIdRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)


@dataclass
class GenerateSessionIdResponse(betterproto.Message):
    session_id: str = betterproto.string_field(1)


@dataclass
class AuthUserSessionRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    user_id: str = betterproto.string_field(2)
    session_id: str = betterproto.string_field(3)
    provider: "OAuthProviders" = betterproto.enum_field(4)
    provider_user_id: str = betterproto.string_field(5)


@dataclass
class AuthUserSessionResponse(betterproto.Message):
    credentials: "BackofficeUserCredentials" = betterproto.message_field(1)


@dataclass
class CheckSessionRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    session_id: str = betterproto.string_field(2)
    user_id: str = betterproto.string_field(3)


@dataclass
class CheckSessionResponse(betterproto.Message):
    status: "CheckSessionResponseSessionStatus" = betterproto.enum_field(1)


@dataclass
class CheckPermissionRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    credentials: "BackofficeUserCredentials" = betterproto.message_field(2)
    permission_name: str = betterproto.string_field(3)


@dataclass
class CheckPermissionResponse(betterproto.Message):
    granted: bool = betterproto.bool_field(1)


@dataclass
class GetTasksRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    credentials: "BackofficeUserCredentials" = betterproto.message_field(2)


@dataclass
class ListKeysRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    credentials: "BackofficeUserCredentials" = betterproto.message_field(2)


@dataclass
class GetTasksResponse(betterproto.Message):
    tasks: "TasksList" = betterproto.message_field(1)


@dataclass
class ListKeysResponse(betterproto.Message):
    key_names: List[str] = betterproto.string_field(1)


@dataclass
class DeleteKeyRequest(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    credentials: "BackofficeUserCredentials" = betterproto.message_field(2)
    key_name: str = betterproto.string_field(3)


@dataclass
class DeleteKeyResponse(betterproto.Message):
    pass


@dataclass
class CreateSlotRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot: "Slot" = betterproto.message_field(2)
    channel_id: str = betterproto.string_field(3)
    is_pipe: bool = betterproto.bool_field(4)


@dataclass
class ConnectSlotRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot_name: str = betterproto.string_field(2)
    slot_uri: str = betterproto.string_field(3)


@dataclass
class DisconnectSlotRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot_name: str = betterproto.string_field(2)


@dataclass
class StatusSlotRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot_name: str = betterproto.string_field(2)


@dataclass
class DestroySlotRequest(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    slot_name: str = betterproto.string_field(2)


@dataclass
class SnapshotCommand(betterproto.Message):
    snapshot_id: str = betterproto.string_field(1)
    entry_id: str = betterproto.string_field(2)


@dataclass
class SlotCommandStatus(betterproto.Message):
    rc: "SlotCommandStatusRC" = betterproto.message_field(1, group="payload")
    status: "SlotStatus" = betterproto.message_field(2, group="payload")


@dataclass
class SlotCommandStatusRC(betterproto.Message):
    code: "SlotCommandStatusRCCode" = betterproto.enum_field(1)
    description: str = betterproto.string_field(2)


@dataclass
class SlotRequest(betterproto.Message):
    slot_uri: str = betterproto.string_field(1)
    offset: int = betterproto.int64_field(2)


@dataclass
class Message(betterproto.Message):
    control: "MessageControls" = betterproto.enum_field(1, group="message")
    chunk: bytes = betterproto.bytes_field(2, group="message")


@dataclass
class CreateWorkflowRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)


@dataclass
class CreateWorkflowResponse(betterproto.Message):
    execution_id: str = betterproto.string_field(1)


@dataclass
class AttachWorkflowRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)
    execution_id: str = betterproto.string_field(2)


@dataclass
class AttachWorkflowResponse(betterproto.Message):
    pass


@dataclass
class FinishWorkflowRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)
    execution_id: str = betterproto.string_field(2)
    reason: str = betterproto.string_field(3)


@dataclass
class FinishWorkflowResponse(betterproto.Message):
    pass


@dataclass
class DeleteWorkflowRequest(betterproto.Message):
    workflow_name: str = betterproto.string_field(1)


@dataclass
class DeleteWorkflowResponse(betterproto.Message):
    pass


@dataclass
class CreateSnapshotCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    creation_date_u_t_c: datetime = betterproto.message_field(2)
    workflow_name: str = betterproto.string_field(3)
    from_snapshot: str = betterproto.string_field(4)


@dataclass
class FinalizeSnapshotCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)


@dataclass
class CreateWhiteboardCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)
    field_names: List[str] = betterproto.string_field(3)
    tags: List[str] = betterproto.string_field(4)
    namespace: str = betterproto.string_field(5)
    creation_date_u_t_c: datetime = betterproto.message_field(6)


@dataclass
class Snapshot(betterproto.Message):
    snapshot_id: str = betterproto.string_field(1)


@dataclass
class SnapshotEntry(betterproto.Message):
    entry_id: str = betterproto.string_field(1)
    storage_uri: str = betterproto.string_field(2)
    dependent_entry_ids: List[str] = betterproto.string_field(3)
    type: "DataScheme" = betterproto.message_field(4)


@dataclass
class PrepareCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)
    entry: "SnapshotEntry" = betterproto.message_field(3)


@dataclass
class CommitCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)
    entry_id: str = betterproto.string_field(3)
    empty: bool = betterproto.bool_field(4)


@dataclass
class AbortCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)
    entry_id: str = betterproto.string_field(3)


@dataclass
class LinkCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    whiteboard_id: str = betterproto.string_field(2)
    field_name: str = betterproto.string_field(3)
    entry_id: str = betterproto.string_field(4)


@dataclass
class GetWhiteboardCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    whiteboard_id: str = betterproto.string_field(2)


@dataclass
class OperationStatus(betterproto.Message):
    status: "OperationStatusStatus" = betterproto.enum_field(1)
    error_message: str = betterproto.string_field(2)


@dataclass
class WhiteboardField(betterproto.Message):
    field_name: str = betterproto.string_field(1)
    storage_uri: str = betterproto.string_field(2)
    dependent_field_names: List[str] = betterproto.string_field(3)
    empty: bool = betterproto.bool_field(4)
    status: "WhiteboardFieldStatus" = betterproto.enum_field(5)
    scheme: "DataScheme" = betterproto.message_field(6)


@dataclass
class Whiteboard(betterproto.Message):
    id: str = betterproto.string_field(1)
    fields: List["WhiteboardField"] = betterproto.message_field(2)
    snapshot: "Snapshot" = betterproto.message_field(3)
    status: "WhiteboardStatus" = betterproto.enum_field(4)
    tags: List[str] = betterproto.string_field(5)
    namespace: str = betterproto.string_field(6)


@dataclass
class BackofficeCredentials(betterproto.Message):
    backoffice_credentials: "UserCredentials" = betterproto.message_field(1)
    credentials: "BackofficeUserCredentials" = betterproto.message_field(2)


@dataclass
class WhiteboardsListCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    namespace: str = betterproto.string_field(2)
    tags: List[str] = betterproto.string_field(3)
    from_date_u_t_c: datetime = betterproto.message_field(4)
    to_date_u_t_c: datetime = betterproto.message_field(5)


@dataclass
class WhiteboardsResponse(betterproto.Message):
    whiteboards: List["Whiteboard"] = betterproto.message_field(1)


@dataclass
class LastSnapshotCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    workflow_name: str = betterproto.string_field(2)


@dataclass
class EntryStatusCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    entry_id: str = betterproto.string_field(2)
    snapshot_id: str = betterproto.string_field(3)


@dataclass
class EntryStatusResponse(betterproto.Message):
    entry_id: str = betterproto.string_field(1)
    snapshot_id: str = betterproto.string_field(2)
    storage_uri: str = betterproto.string_field(3)
    empty: bool = betterproto.bool_field(4)
    status: "EntryStatusResponseStatus" = betterproto.enum_field(5)


@dataclass
class CreateEntryCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    entry_id: str = betterproto.string_field(2)
    snapshot_id: str = betterproto.string_field(3)


@dataclass
class InputArgDescription(betterproto.Message):
    name: str = betterproto.string_field(1)
    hash: str = betterproto.string_field(2)
    entry_id: str = betterproto.string_field(3)


@dataclass
class OutputArgDescription(betterproto.Message):
    name: str = betterproto.string_field(1)
    entry_id: str = betterproto.string_field(2)


@dataclass
class ExecutionDescription(betterproto.Message):
    name: str = betterproto.string_field(1)
    snapshot_id: str = betterproto.string_field(2)
    input: List["InputArgDescription"] = betterproto.message_field(3)
    output: List["OutputArgDescription"] = betterproto.message_field(4)


@dataclass
class SaveExecutionCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    description: "ExecutionDescription" = betterproto.message_field(2)


@dataclass
class SaveExecutionResponse(betterproto.Message):
    pass


@dataclass
class ResolveExecutionCommand(betterproto.Message):
    auth: "Auth" = betterproto.message_field(1)
    snapshot_id: str = betterproto.string_field(2)
    operation_name: str = betterproto.string_field(3)
    args: List["ResolveExecutionCommandArgDescription"] = betterproto.message_field(4)


@dataclass
class ResolveExecutionCommandArgDescription(betterproto.Message):
    name: str = betterproto.string_field(1)
    hash: str = betterproto.string_field(2, group="info")
    entry_id: str = betterproto.string_field(3, group="info")


@dataclass
class ResolveExecutionResponse(betterproto.Message):
    execution: List["ExecutionDescription"] = betterproto.message_field(1)


class LzyServantStub(betterproto.ServiceStub):
    async def start(self) -> AsyncGenerator[ServantProgress, None]:
        """* Only one execution at a time"""

        request = Empty()

        async for response in self._unary_stream(
            "/lzy.proto.priv.v2.LzyServant/Start",
            request,
            ServantProgress,
        ):
            yield response

    async def env(
        self,
        *,
        base_env: Optional["BaseEnv"] = None,
        aux_env: Optional["AuxEnv"] = None,
    ) -> EnvResult:
        request = EnvSpec()
        if base_env is not None:
            request.base_env = base_env
        if aux_env is not None:
            request.aux_env = aux_env

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Env",
            request,
            EnvResult,
        )

    async def execute(
        self,
        *,
        tid: str = "",
        auth: Optional["Auth"] = None,
        zygote: Optional["Zygote"] = None,
        assignments: List["SlotAssignment"] = [],
    ) -> ExecutionStarted:
        request = TaskSpec()
        request.tid = tid
        if auth is not None:
            request.auth = auth
        if zygote is not None:
            request.zygote = zygote
        if assignments is not None:
            request.assignments = assignments

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Execute",
            request,
            ExecutionStarted,
        )

    async def signal(self, *, sig: "TaskSignalSIGType" = 0) -> Empty:
        request = TaskSignal()
        request.sig = sig

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Signal",
            request,
            Empty,
        )

    async def update(
        self,
        *,
        user: Optional["UserCredentials"] = None,
        task: Optional["TaskCredentials"] = None,
    ) -> Empty:
        request = Auth()
        if user is not None:
            request.user = user
        if task is not None:
            request.task = task

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Update",
            request,
            Empty,
        )

    async def status(self) -> ServantStatus:
        request = Empty()

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Status",
            request,
            ServantStatus,
        )

    async def stop(self) -> Empty:
        request = Empty()

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyServant/Stop",
            request,
            Empty,
        )


class LzyBackofficeStub(betterproto.ServiceStub):
    async def add_key(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        user_credentials: Optional["BackofficeUserCredentials"] = None,
        public_key: str = "",
        key_name: str = "",
    ) -> AddKeyResult:
        request = AddKeyRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if user_credentials is not None:
            request.user_credentials = user_credentials
        request.public_key = public_key
        request.key_name = key_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/AddKey",
            request,
            AddKeyResult,
        )

    async def list_keys(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        credentials: Optional["BackofficeUserCredentials"] = None,
    ) -> ListKeysResponse:
        request = ListKeysRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if credentials is not None:
            request.credentials = credentials

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/ListKeys",
            request,
            ListKeysResponse,
        )

    async def delete_key(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        credentials: Optional["BackofficeUserCredentials"] = None,
        key_name: str = "",
    ) -> DeleteKeyResponse:
        request = DeleteKeyRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if credentials is not None:
            request.credentials = credentials
        request.key_name = key_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/DeleteKey",
            request,
            DeleteKeyResponse,
        )

    async def create_user(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        creator_credentials: Optional["BackofficeUserCredentials"] = None,
        user: Optional["User"] = None,
    ) -> CreateUserResult:
        request = CreateUserRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if creator_credentials is not None:
            request.creator_credentials = creator_credentials
        if user is not None:
            request.user = user

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/CreateUser",
            request,
            CreateUserResult,
        )

    async def delete_user(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        deleter_credentials: Optional["BackofficeUserCredentials"] = None,
        user_id: str = "",
    ) -> DeleteUserResult:
        request = DeleteUserRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if deleter_credentials is not None:
            request.deleter_credentials = deleter_credentials
        request.user_id = user_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/DeleteUser",
            request,
            DeleteUserResult,
        )

    async def list_users(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        caller_credentials: Optional["BackofficeUserCredentials"] = None,
    ) -> ListUsersResponse:
        request = ListUsersRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if caller_credentials is not None:
            request.caller_credentials = caller_credentials

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/ListUsers",
            request,
            ListUsersResponse,
        )

    async def generate_session_id(
        self, *, backoffice_credentials: Optional["UserCredentials"] = None
    ) -> GenerateSessionIdResponse:
        request = GenerateSessionIdRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/GenerateSessionId",
            request,
            GenerateSessionIdResponse,
        )

    async def auth_user_session(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        user_id: str = "",
        session_id: str = "",
        provider: "OAuthProviders" = 0,
        provider_user_id: str = "",
    ) -> AuthUserSessionResponse:
        request = AuthUserSessionRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        request.user_id = user_id
        request.session_id = session_id
        request.provider = provider
        request.provider_user_id = provider_user_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/AuthUserSession",
            request,
            AuthUserSessionResponse,
        )

    async def check_session(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        session_id: str = "",
        user_id: str = "",
    ) -> CheckSessionResponse:
        request = CheckSessionRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        request.session_id = session_id
        request.user_id = user_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/CheckSession",
            request,
            CheckSessionResponse,
        )

    async def check_permission(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        credentials: Optional["BackofficeUserCredentials"] = None,
        permission_name: str = "",
    ) -> CheckPermissionResponse:
        request = CheckPermissionRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if credentials is not None:
            request.credentials = credentials
        request.permission_name = permission_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/CheckPermission",
            request,
            CheckPermissionResponse,
        )

    async def get_tasks(
        self,
        *,
        backoffice_credentials: Optional["UserCredentials"] = None,
        credentials: Optional["BackofficeUserCredentials"] = None,
    ) -> GetTasksResponse:
        request = GetTasksRequest()
        if backoffice_credentials is not None:
            request.backoffice_credentials = backoffice_credentials
        if credentials is not None:
            request.credentials = credentials

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyBackoffice/GetTasks",
            request,
            GetTasksResponse,
        )


class LzyFsStub(betterproto.ServiceStub):
    async def create_slot(
        self,
        *,
        task_id: str = "",
        slot: Optional["Slot"] = None,
        channel_id: str = "",
        is_pipe: bool = False,
    ) -> SlotCommandStatus:
        request = CreateSlotRequest()
        request.task_id = task_id
        if slot is not None:
            request.slot = slot
        request.channel_id = channel_id
        request.is_pipe = is_pipe

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyFs/CreateSlot",
            request,
            SlotCommandStatus,
        )

    async def connect_slot(
        self, *, task_id: str = "", slot_name: str = "", slot_uri: str = ""
    ) -> SlotCommandStatus:
        request = ConnectSlotRequest()
        request.task_id = task_id
        request.slot_name = slot_name
        request.slot_uri = slot_uri

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyFs/ConnectSlot",
            request,
            SlotCommandStatus,
        )

    async def disconnect_slot(
        self, *, task_id: str = "", slot_name: str = ""
    ) -> SlotCommandStatus:
        request = DisconnectSlotRequest()
        request.task_id = task_id
        request.slot_name = slot_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyFs/DisconnectSlot",
            request,
            SlotCommandStatus,
        )

    async def status_slot(
        self, *, task_id: str = "", slot_name: str = ""
    ) -> SlotCommandStatus:
        request = StatusSlotRequest()
        request.task_id = task_id
        request.slot_name = slot_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyFs/StatusSlot",
            request,
            SlotCommandStatus,
        )

    async def destroy_slot(
        self, *, task_id: str = "", slot_name: str = ""
    ) -> SlotCommandStatus:
        request = DestroySlotRequest()
        request.task_id = task_id
        request.slot_name = slot_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyFs/DestroySlot",
            request,
            SlotCommandStatus,
        )

    async def open_output_slot(
        self, *, slot_uri: str = "", offset: int = 0
    ) -> AsyncGenerator[Message, None]:
        request = SlotRequest()
        request.slot_uri = slot_uri
        request.offset = offset

        async for response in self._unary_stream(
            "/lzy.proto.priv.v2.LzyFs/OpenOutputSlot",
            request,
            Message,
        ):
            yield response


class LzyWorkflowStub(betterproto.ServiceStub):
    async def create_workflow(
        self, *, workflow_name: str = ""
    ) -> CreateWorkflowResponse:
        request = CreateWorkflowRequest()
        request.workflow_name = workflow_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyWorkflow/CreateWorkflow",
            request,
            CreateWorkflowResponse,
        )

    async def attach_workflow(
        self, *, workflow_name: str = "", execution_id: str = ""
    ) -> AttachWorkflowResponse:
        request = AttachWorkflowRequest()
        request.workflow_name = workflow_name
        request.execution_id = execution_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyWorkflow/AttachWorkflow",
            request,
            AttachWorkflowResponse,
        )

    async def finish_workflow(
        self, *, workflow_name: str = "", execution_id: str = "", reason: str = ""
    ) -> FinishWorkflowResponse:
        request = FinishWorkflowRequest()
        request.workflow_name = workflow_name
        request.execution_id = execution_id
        request.reason = reason

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyWorkflow/FinishWorkflow",
            request,
            FinishWorkflowResponse,
        )

    async def delete_workflow(
        self, *, workflow_name: str = ""
    ) -> DeleteWorkflowResponse:
        request = DeleteWorkflowRequest()
        request.workflow_name = workflow_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.LzyWorkflow/DeleteWorkflow",
            request,
            DeleteWorkflowResponse,
        )


class SnapshotApiStub(betterproto.ServiceStub):
    async def create_snapshot(
        self,
        *,
        auth: Optional["Auth"] = None,
        creation_date_u_t_c: Optional[datetime] = None,
        workflow_name: str = "",
        from_snapshot: str = "",
    ) -> Snapshot:
        request = CreateSnapshotCommand()
        if auth is not None:
            request.auth = auth
        if creation_date_u_t_c is not None:
            request.creation_date_u_t_c = creation_date_u_t_c
        request.workflow_name = workflow_name
        request.from_snapshot = from_snapshot

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/CreateSnapshot",
            request,
            Snapshot,
        )

    async def prepare_to_save(
        self,
        *,
        auth: Optional["Auth"] = None,
        snapshot_id: str = "",
        entry: Optional["SnapshotEntry"] = None,
    ) -> OperationStatus:
        request = PrepareCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id
        if entry is not None:
            request.entry = entry

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/PrepareToSave",
            request,
            OperationStatus,
        )

    async def commit(
        self,
        *,
        auth: Optional["Auth"] = None,
        snapshot_id: str = "",
        entry_id: str = "",
        empty: bool = False,
    ) -> OperationStatus:
        request = CommitCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id
        request.entry_id = entry_id
        request.empty = empty

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/Commit",
            request,
            OperationStatus,
        )

    async def abort(
        self,
        *,
        auth: Optional["Auth"] = None,
        snapshot_id: str = "",
        entry_id: str = "",
    ) -> OperationStatus:
        request = AbortCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id
        request.entry_id = entry_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/Abort",
            request,
            OperationStatus,
        )

    async def finalize_snapshot(
        self, *, auth: Optional["Auth"] = None, snapshot_id: str = ""
    ) -> OperationStatus:
        request = FinalizeSnapshotCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/FinalizeSnapshot",
            request,
            OperationStatus,
        )

    async def last_snapshot(
        self, *, auth: Optional["Auth"] = None, workflow_name: str = ""
    ) -> Snapshot:
        request = LastSnapshotCommand()
        if auth is not None:
            request.auth = auth
        request.workflow_name = workflow_name

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/LastSnapshot",
            request,
            Snapshot,
        )

    async def entry_status(
        self,
        *,
        auth: Optional["Auth"] = None,
        entry_id: str = "",
        snapshot_id: str = "",
    ) -> EntryStatusResponse:
        request = EntryStatusCommand()
        if auth is not None:
            request.auth = auth
        request.entry_id = entry_id
        request.snapshot_id = snapshot_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/EntryStatus",
            request,
            EntryStatusResponse,
        )

    async def create_entry(
        self,
        *,
        auth: Optional["Auth"] = None,
        entry_id: str = "",
        snapshot_id: str = "",
    ) -> OperationStatus:
        request = CreateEntryCommand()
        if auth is not None:
            request.auth = auth
        request.entry_id = entry_id
        request.snapshot_id = snapshot_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/CreateEntry",
            request,
            OperationStatus,
        )

    async def save_execution(
        self,
        *,
        auth: Optional["Auth"] = None,
        description: Optional["ExecutionDescription"] = None,
    ) -> SaveExecutionResponse:
        request = SaveExecutionCommand()
        if auth is not None:
            request.auth = auth
        if description is not None:
            request.description = description

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/SaveExecution",
            request,
            SaveExecutionResponse,
        )

    async def resolve_execution(
        self,
        *,
        auth: Optional["Auth"] = None,
        snapshot_id: str = "",
        operation_name: str = "",
        args: List["ResolveExecutionCommandArgDescription"] = [],
    ) -> ResolveExecutionResponse:
        request = ResolveExecutionCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id
        request.operation_name = operation_name
        if args is not None:
            request.args = args

        return await self._unary_unary(
            "/lzy.proto.priv.v2.SnapshotApi/ResolveExecution",
            request,
            ResolveExecutionResponse,
        )


class WbApiStub(betterproto.ServiceStub):
    async def create_whiteboard(
        self,
        *,
        auth: Optional["Auth"] = None,
        snapshot_id: str = "",
        field_names: List[str] = [],
        tags: List[str] = [],
        namespace: str = "",
        creation_date_u_t_c: Optional[datetime] = None,
    ) -> Whiteboard:
        request = CreateWhiteboardCommand()
        if auth is not None:
            request.auth = auth
        request.snapshot_id = snapshot_id
        request.field_names = field_names
        request.tags = tags
        request.namespace = namespace
        if creation_date_u_t_c is not None:
            request.creation_date_u_t_c = creation_date_u_t_c

        return await self._unary_unary(
            "/lzy.proto.priv.v2.WbApi/CreateWhiteboard",
            request,
            Whiteboard,
        )

    async def link(
        self,
        *,
        auth: Optional["Auth"] = None,
        whiteboard_id: str = "",
        field_name: str = "",
        entry_id: str = "",
    ) -> OperationStatus:
        request = LinkCommand()
        if auth is not None:
            request.auth = auth
        request.whiteboard_id = whiteboard_id
        request.field_name = field_name
        request.entry_id = entry_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.WbApi/Link",
            request,
            OperationStatus,
        )

    async def get_whiteboard(
        self, *, auth: Optional["Auth"] = None, whiteboard_id: str = ""
    ) -> Whiteboard:
        request = GetWhiteboardCommand()
        if auth is not None:
            request.auth = auth
        request.whiteboard_id = whiteboard_id

        return await self._unary_unary(
            "/lzy.proto.priv.v2.WbApi/GetWhiteboard",
            request,
            Whiteboard,
        )

    async def whiteboards_list(
        self,
        *,
        auth: Optional["Auth"] = None,
        namespace: str = "",
        tags: List[str] = [],
        from_date_u_t_c: Optional[datetime] = None,
        to_date_u_t_c: Optional[datetime] = None,
    ) -> WhiteboardsResponse:
        request = WhiteboardsListCommand()
        if auth is not None:
            request.auth = auth
        request.namespace = namespace
        request.tags = tags
        if from_date_u_t_c is not None:
            request.from_date_u_t_c = from_date_u_t_c
        if to_date_u_t_c is not None:
            request.to_date_u_t_c = to_date_u_t_c

        return await self._unary_unary(
            "/lzy.proto.priv.v2.WbApi/WhiteboardsList",
            request,
            WhiteboardsResponse,
        )
