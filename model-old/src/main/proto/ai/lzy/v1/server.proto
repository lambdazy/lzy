syntax = "proto3";

import "ai/lzy/v1/auth.proto";
import "ai/lzy/v1/common/zygote.proto";
import "ai/lzy/v1/task.proto";

package ai.lzy.v1;

option java_outer_classname = "Lzy";
option java_package = "ai.lzy.v1";

service LzyServer {
  rpc Publish (PublishRequest) returns (PublishResponse);
  rpc Zygotes (Auth) returns (ZygoteList);

  rpc Task (TaskCommand) returns (TaskStatus);
  rpc Start (TaskSpec) returns (stream TaskProgress);

  rpc RegisterSession (RegisterSessionRequest) returns (RegisterSessionResponse);
  rpc GetSessions (GetSessionsRequest) returns (GetSessionsResponse);
  rpc UnregisterSession (UnregisterSessionRequest) returns (UnregisterSessionResponse);

  rpc TasksStatus (Auth) returns (TasksList);

  rpc RegisterServant (AttachServant) returns (AttachStatus);

  rpc CheckUserPermissions (CheckUserPermissionsRequest) returns (CheckUserPermissionsResponse);

  rpc GetS3Credentials (GetS3CredentialsRequest) returns (GetS3CredentialsResponse);

  rpc GetBucket (GetBucketRequest) returns (GetBucketResponse);

  rpc GetUser (GetUserRequest) returns (GetUserResponse);
}

message PublishRequest {
  UserCredentials auth = 1;
  VisibilityScope scope = 2;

  Zygote operation = 4;

  enum VisibilityScope {
    UNSPECIFIED = 0;
    USER = 1;
    GROUP = 2;
    ALL = 3;
  }
}

message PublishResponse {
}

message AttachServant {
  Auth auth = 1;
  string servantURI = 2; // control plane, format 'servant://host:port/...'
  string servantId = 3;
  string fsURI = 4;      // data place, format 'fs://host:port/...'
}

message AttachStatus {
}

message CheckUserPermissionsRequest {
  Auth auth = 1;
  repeated string permissions = 2;
}

message CheckUserPermissionsResponse {
  bool isOk = 1;
}

message GetS3CredentialsRequest {
  Auth auth = 1;
  string bucket = 2;
}

message AzureCredentials {
  string connectionString = 1;
}

message AzureSASCredentials {
  string signature = 1;
  string endpoint = 2;
}

message AmazonCredentials {
  string endpoint = 1;
  string accessToken = 2;
  string secretToken = 3;
}

message GetS3CredentialsResponse {
  oneof credentials {
    AmazonCredentials amazon = 1;
    AzureCredentials azure = 2;
    AzureSASCredentials azureSas = 4;
  }
}

message GetSessionsRequest {
  UserCredentials auth = 1;
}

message SessionDescription {
  string session_id = 1;
}

message GetSessionsResponse {
  repeated SessionDescription sessions = 1;
}

message RegisterSessionRequest {
  UserCredentials auth = 1;
  string session_id = 2;
}

message RegisterSessionResponse {
}

message UnregisterSessionRequest {
  UserCredentials auth = 1;
  string session_id = 2;
}

message UnregisterSessionResponse {
}

message GetBucketRequest {
  Auth auth = 1;
}

message GetBucketResponse {
  string bucket = 1;
}

message GetUserRequest {
  Auth auth = 1;
}

message GetUserResponse {
  string userId = 1;
}
