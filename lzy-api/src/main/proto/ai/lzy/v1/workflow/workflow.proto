syntax = "proto3";

package ai.lzy.v1.workflow;

import "ai/lzy/v1/common/data-scheme.proto";
import "ai/lzy/v1/validation/validation.proto";

option java_outer_classname = "LWF";
option java_package = "ai.lzy.v1.workflow";

message Operation {
  string name = 1;  // Some human-readable name to show in UI
  /* optional */ string description = 2;  // Some human-readable description
  string command = 3 [(validation.sensitive) = true];  // command to execute

  // Paths of slots to open. Must be uniq per workflow
  repeated SlotDescription inputSlots = 4;
  repeated SlotDescription outputSlots = 5;

  /* optional */ string dockerImage = 6;  // If not set, running on default Lzy image

  oneof execution_context {
    /* optional */ PythonEnvSpec python = 7;  // If not set, running in default bash env
  }

  string poolSpecName = 8;  // Label to execute operation in

  /* optional */ map<string, string> env = 9;  // Environment variables to run operation with

  message SlotDescription {
    string path = 1;
    string storageUri = 2;
  }

  message PythonEnvSpec {
    string yaml = 2;  // Conda yaml to install before execution
    repeated LocalModule localModules = 3;

    message LocalModule {
      string name = 1;  // Name of module
      string url = 2;  // Url in storage to get module from
    }
  }
}

message DataDescription {
  string storageUri = 1;
  /* optional */ ai.lzy.v1.common.DataScheme dataScheme = 2;  // If not set, using plain scheme
}

message Graph {
  string name = 1;  // Human-readable name to show in UI

  string parentGraphId = 2;

  repeated Operation operations = 3;
  repeated DataDescription dataDescriptions = 4;

  /* optional */ string zone = 5;  // Availability zone to execute graph in.
  // If not set, selected some zone, matching all pools
}

message VmPoolSpec {
  string poolSpecName = 1;       // 's', 'm', 'l', ...
  string cpuType = 2;          // IceLake, CascadeLake, Broadwell, ...
  uint32 cpuCount = 3;         // # of CPU cores
  string gpuType = 4;          // V100, A100, ...
  uint32 gpuCount = 5;         // # of GPU cores
  uint32 ramGb = 6;            // RAM in GB
  repeated string zones = 7;    // availability zones
}

message WhiteboardField {
  string name = 1;
  /* optional */ DefaultFieldDesc default = 2;  // Default field value

  message DefaultFieldDesc {
    string uri = 2;
    ai.lzy.v1.common.DataScheme dataScheme = 3;
  }
}
