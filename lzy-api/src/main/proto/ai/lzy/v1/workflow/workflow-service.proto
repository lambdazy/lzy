syntax = "proto3";

package ai.lzy.v1.workflow;

import "ai/lzy/v1/common/storage.proto";
import "ai/lzy/v1/workflow/workflow.proto";
import "ai/lzy/v1/common/data-scheme.proto";
import "ai/lzy/v1/long-running/operation.proto";
import "ai/lzy/v1/long-running/option.proto";

option java_outer_classname = "LWFS";
option java_package = "ai.lzy.v1.workflow";

service LzyWorkflowService {
  rpc StartWorkflow (StartWorkflowRequest) returns (StartWorkflowResponse);
  rpc FinishWorkflow (FinishWorkflowRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      // metadata: null
      response: "FinishWorkflowResponse";
    };
  }
  rpc AbortWorkflow (AbortWorkflowRequest) returns (AbortWorkflowResponse);

  rpc ExecuteGraph (ExecuteGraphRequest) returns (ExecuteGraphResponse);
  rpc GraphStatus (GraphStatusRequest) returns (GraphStatusResponse);
  rpc StopGraph (StopGraphRequest) returns (StopGraphResponse);

  rpc ReadStdSlots (ReadStdSlotsRequest) returns (stream ReadStdSlotsResponse);

  rpc GetAvailablePools (GetAvailablePoolsRequest) returns (GetAvailablePoolsResponse);

  rpc GetOrCreateDefaultStorage (GetOrCreateDefaultStorageRequest) returns (GetOrCreateDefaultStorageResponse);
}

message StartWorkflowRequest {
  string workflowName = 1;
  ai.lzy.v1.common.StorageConfig snapshotStorage = 2;
  string storageName = 3;
}

message StartWorkflowResponse {
  string executionId = 1;
}

message FinishWorkflowRequest {
  string workflowName = 1;
  string executionId = 2;
  string reason = 3;
}

message FinishWorkflowResponse {}

message AbortWorkflowRequest {
  string workflowName = 1;
  string executionId = 2;
  string reason = 3;
}

message AbortWorkflowResponse {}

// ==================== ExecuteGraph =====================

message ExecuteGraphRequest {
  string workflowName = 1;
  string executionId = 2;
  Graph graph = 3;
}

message ExecuteGraphResponse {
  string graphId = 1;
}


// ==================== GraphStatus =====================

message GraphStatusRequest {
  string executionId = 1;
  string graphId = 2;
}

message GraphStatusResponse {
  oneof status {
    Waiting waiting = 1;
    Executing executing = 2;
    Completed completed = 3;
    Failed failed = 4;
  }

  message Waiting {}
  message Executing {
    repeated string operationsCompleted = 1;  // List of completed operations
    repeated string operationsExecuting = 2;  // List of currently executing operations
    repeated string operationsWaiting = 3;  // List of waiting operations
    string message = 4;  // Human-readable message to show user
  }
  message Completed {}
  message Failed {
    string description = 1;
    string failedTask = 2;
  }
}


// ==================== StopGraph =====================

message StopGraphRequest {
  string executionId = 1;
  string graphId = 2;
}

message StopGraphResponse {}


// ==================== ReadStdSlots =====================

message ReadStdSlotsRequest {
  string executionId = 1;

  // Offset of data to read from.
  // If 0 or not set, read from the beginning.
  /* optional */ uint64 offset = 2;
}

message ReadStdSlotsResponse {
  Data stdout = 1;
  Data stderr = 2;

  uint64 offset = 3;

  message TaskLines {
    string taskId = 1;
    string lines = 2;
  }

  message Data {
    repeated TaskLines data = 1;
  }
}


// ==================== GetAvailablePools =====================

message GetAvailablePoolsRequest {
  string executionId = 1;
}

message GetAvailablePoolsResponse {
  repeated VmPoolSpec poolSpecs = 1;
}


// ==================== GetStorage =====================

message GetOrCreateDefaultStorageRequest {
}

message GetOrCreateDefaultStorageResponse {
  ai.lzy.v1.common.StorageConfig storage = 1;
}
