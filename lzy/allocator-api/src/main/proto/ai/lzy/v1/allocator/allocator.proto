syntax = "proto3";

package ai.lzy.v1.allocator;

option java_outer_classname = "VmAllocatorApi";
option java_package = "ai.lzy.v1";

import "ai/lzy/v1/long-running/operation.proto";
import "ai/lzy/v1/long-running/option.proto";
import "ai/lzy/v1/validation/validation.proto";
import "ai/lzy/v1/allocator/volume.proto";
import "google/protobuf/duration.proto";

//
// Service to allocate vm
// Auth requirements: IAM Internal User
//
service Allocator {

  // Create allocation session
  rpc CreateSession (CreateSessionRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      // metadata: null
      response: "CreateSessionResponse"
    };
  }

  // Delete allocation session and all resources
  rpc DeleteSession (DeleteSessionRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      // metadata: null
      response: "DeleteSessionResponse"
    };
  }

  rpc Allocate (AllocateRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      metadata: "AllocateMetadata"
      response: "AllocateResponse"
    };
  }

  // Return control of vm to allocator
  rpc Free (FreeRequest) returns (FreeResponse);

  rpc Mount (MountRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      metadata: "MountMetadata"
      response: "MountResponse"
    };
  }

  rpc ListMounts (ListMountsRequest) returns (ListMountsResponse);

  rpc Unmount (UnmountRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      // metadata: null
      response: "UnmountResponse"
    };
  }

}

// ========= Create session ==========

message CachePolicy {
  google.protobuf.Duration idle_timeout = 1;
}

message CreateSessionRequest {
  string owner = 1;
  string description = 2;
  CachePolicy cache_policy = 3;
}
message CreateSessionResponse {
  string session_id = 1;
}

// ========= Delete session ==========

message DeleteSessionRequest {
  string session_id = 1;
}
message DeleteSessionResponse {}

// ========= Allocate ==========
message AllocateRequest {
  message Workload {
    string name = 1;

    // image must contains allocator agent to notify allocator about lifecycle
    string image = 2;

    map<string, string> env = 16 [(validation.sensitive) = true];
    repeated string args = 17;
    map<uint32, uint32> port_bindings = 18;  // host port: container port

    repeated Mount volume_mounts = 20;
  }

  enum ClusterType {
    UNSPECIFIED = 0;
    USER = 1;
    SYSTEM = 2;
  }

  string session_id = 1;
  string pool_label = 2;
  string zone = 3;

  // workloads which are run _before_ the main workloads are started (== K8s Init Containers)
  // init containers are run until succeeded before running common containers
  repeated Workload init_workload = 4;
  // main workloads
  repeated Workload workload = 5;

  repeated Volume volumes = 6;
  reserved 7;
  // Sets cluster type requirements for allocation
  ClusterType cluster_type = 8;
  optional TunnelSettings tunnel_settings = 9;
}

message TunnelSettings {
  // v6 address of the proxy machine on user network + on the same network where vm will be launched.
  // Setting this field will result in creating ip6 tunnel to this address on the vm side.
  // Only works for k8s allocated machines and expected to be the address of other side of the tunnel.
  string proxy_v6_address = 1;
  int32 tunnel_index = 2;
}

message AllocateResponse {
  string pool_id = 1;
  string vm_id = 2;
  string session_id = 3;
  map<string, string> metadata = 4;
  repeated VmEndpoint endpoints = 5;

  message VmEndpoint {
    VmEndpointType type = 1;
    string value = 2;

    enum VmEndpointType {
      UNSPECIFIED = 0;
      HOST_NAME = 1;
      EXTERNAL_IP = 2;
      INTERNAL_IP = 3;
    }
  }
}

message AllocateMetadata {
  string vm_id = 1;
}

// ========= Free ==========

message FreeRequest {
  string vm_id = 2;
}

message FreeResponse {}

// ========= Mount disk ==========

message MountRequest {
  string vm_id = 1;
  string mount_path = 2;
  oneof VolumeType {
    DiskVolumeType disk_volume = 3;
    //it's supposed that we'll have other mount types like NFS
  }
}

message MountMetadata {
  DynamicMount mount = 1;
}

message MountResponse {
  DynamicMount mount = 1;
}

// ========= List mounts ==========

message ListMountsRequest {
  string vm_id = 1;
}

message ListMountsResponse {
  repeated DynamicMount mounts = 1;
}

message DynamicMount {
  string id = 1;
  optional string vm_id = 2;
  string mount_name = 3;
  string mount_path = 4;
  optional string volume_name = 5;
  optional string volume_claim_name = 6;
  VolumeRequest volume_request = 7;
  string state = 8;
  string mount_operation_id = 9;
  optional string unmount_operation_id = 10;
}

// ========= Unmount disk ==========

message UnmountRequest {
  string mount_id = 1;
}

message UnmountResponse {
}
