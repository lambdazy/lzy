syntax = "proto3";

package ai.lzy.graph;

option java_outer_classname = "LGE";
option java_package = "ai.lzy.graph";

import "ai/lzy/v1/long-running/operation.proto";
import "ai/lzy/v1/long-running/option.proto";
import "ai/lzy/v1/common/operation.proto";

service GraphExecutor {
  rpc Execute (ExecuteGraphRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      metadata: "ExecuteGraphMetadata"
      response: "ExecuteGraphResponse"
    };
  }
}

message ExecuteGraphRequest {
  string user_id = 1;
  string workflow_name = 2;
  string execution_id = 3;
  string allocator_session_id = 4;
  /* optional */ string parent_graph_id = 5;

  message TaskDesc {
    message SlotToChannelAssignment {
      string slot_name = 1;
      string channel_id = 2;
    }

    string id = 1;
    ai.lzy.v1.common.Operation operation = 2;
    repeated SlotToChannelAssignment slot_assignments = 3;
  }

  repeated TaskDesc tasks = 6;

  message ChannelDesc {
    string id = 1;
  }

  repeated ChannelDesc channels = 7;
}

message GraphState {
  message Waiting {}

  message Executing {
    repeated TaskExecutionStatus executing_tasks = 1;
  }

  message Completed {}

  message Failed {
    string description = 1;
    string failed_task_id = 2;
    string failed_task_name = 3;
  }
}

message ExecuteGraphMetadata {
  string user_id = 1;
  string workflow_name = 2;
  string execution_id = 3;
  string graph_id = 4;

  oneof status {
    GraphState.Waiting waiting = 10;
    GraphState.Executing executing = 11;
    GraphState.Completed completed = 12;
    GraphState.Failed failed = 13;
  }
}

message ExecuteGraphResponse {
  string user_id = 1;
  string workflow_name = 2;
  string execution_id = 3;
  string graph_id = 4;

  oneof status {
    GraphState.Completed completed = 10;
    GraphState.Failed failed = 11;
  }
}

message TaskExecutionStatus {
  string task_id = 1;
  string task_description_id = 2;
  string workflow_name = 3;
  string execution_id = 4;
  string operation_name = 5;

  message Executing {}

  message Success {
    int32 rc = 1;
    string description = 2;
  }

  message Error {
    int32 rc = 1;
    string description = 2;
  }

  oneof status {
    Executing executing = 10;
    Success success = 11;
    Error error = 12;
  }
}
