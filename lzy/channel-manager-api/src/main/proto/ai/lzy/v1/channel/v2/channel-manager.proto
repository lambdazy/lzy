syntax = "proto3";

package ai.lzy.v1.channel.v2;

import "ai/lzy/v1/long-running/operation.proto";
import "ai/lzy/v1/long-running/option.proto";
import "ai/lzy/v1/channel/v2/channel.proto";
import "ai/lzy/v1/common/data-scheme.proto";

option java_outer_classname = "LCMS";
option java_package = "ai.lzy.v1.channel.v2";

service LzyChannelManager {

  rpc Bind (BindRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      response: "BindResponse"
      metadata: "BindMetadata"
    };
  }

  rpc Unbind (UnbindRequest) returns (ai.lzy.v1.longrunning.Operation) {
    option (ai.lzy.v1.operation) = {
      response: "UnbindResponse"
      metadata: "UnbindMetadata"
    };
  }

  rpc GetChannelsStatus (GetChannelsStatusRequest) returns (GetChannelsStatusResponse);

}

// =========== Bind ==============

message BindRequest {
  string execution_id = 1;
  string channel_id   = 2;   // Id of channel to bind to

  string peer_id      = 3;
  string peer_url     = 4;   // URL of slots api to connect to
  Role role           = 5;

  enum Role {
    UNKNOWN = 0;
    SENDER = 1;
    RECEIVER = 2;
  }
}

message BindResponse {
  common.DataScheme data_scheme = 1;  // Data scheme of channel. Data of slot can be validated with this scheme
}

message BindMetadata {}

// =========== Unbind ==============

message UnbindRequest {
  string peer_id = 1;
}

message UnbindResponse {}

message UnbindMetadata {}

// =========== GetChannelsStatus ==============

message GetChannelsStatusRequest {
  string execution_id = 1;
  repeated string channel_ids = 2;
}

message GetChannelsStatusResponse {
  repeated ChannelStatus channels = 1;
}


