syntax = "proto3";

package ai.lzy.v1.workflow;

import "ai/lzy/v1/common/s3.proto";
import "ai/lzy/v1/workflow/workflow.proto";

option java_outer_classname = "LWFS";
option java_package = "ai.lzy.v1.workflow";

service LzyWorkflowService {
  rpc CreateWorkflow (CreateWorkflowRequest) returns (CreateWorkflowResponse);
  rpc AttachWorkflow (AttachWorkflowRequest) returns (AttachWorkflowResponse);
  rpc FinishWorkflow (FinishWorkflowRequest) returns (FinishWorkflowResponse);
  rpc DeleteWorkflow (DeleteWorkflowRequest) returns (DeleteWorkflowResponse);

  rpc ExecuteGraph (ExecuteGraphRequest) returns (ExecuteGraphResponse);
  rpc GraphStatus (GraphStatusRequest) returns (GraphStatusResponse);
  rpc StopGraph (StopGraphRequest) returns (StopGraphResponse);

  rpc ReadStdSlots (ReadStdSlotsRequest) returns (stream ReadStdSlotsResponse);

  rpc GetAvailablePools (GetAvailablePoolsRequest) returns (GetAvailablePoolsResponse);

  rpc CreateWhiteboard (CreateWhiteboardRequest) returns (CreateWhiteboardResponse);
  rpc LinkWhiteboard (LinkWhiteboardRequest) returns (LinkWhiteboardResponse);
}

message CreateWorkflowRequest {
  string workflowName = 1;

  // if not set then internal SnapshotStorage is created
  /* optional */ S3Locator snapshotStorage = 2;
}

message CreateWorkflowResponse {
  string executionId = 1;
  /* optional */ S3Locator internalSnapshotStorage = 2;
}

message AttachWorkflowRequest {
  string workflowName = 1;
  string executionId = 2;
}

message AttachWorkflowResponse {
}

message FinishWorkflowRequest {
  string workflowName = 1;
  string executionId = 2;
  string reason = 3;
}

message FinishWorkflowResponse {
}

message DeleteWorkflowRequest {
  string workflowName = 1;
}

message DeleteWorkflowResponse {
}

// ================== CreateWhiteboard ===================

message CreateWhiteboardRequest {
  string name = 1;
  string namespace = 2;
  string storageName = 3;
  repeated WhiteboardField fields = 4;
  repeated string tags = 5;
}

message CreateWhiteboardResponse {
  string whiteboardId = 1;
}

// =================== LinkWhiteboard ====================

message LinkWhiteboardRequest {
  string whiteboardId = 1;
  WhiteboardField field = 2;
}

message LinkWhiteboardResponse {}

// ==================== ExecuteGraph =====================

message ExecuteGraphRequest {
  string executionId = 1;
  Graph graph = 2;
}

message ExecuteGraphResponse {
  string graphId = 1;
}


// ==================== GraphStatus =====================

message GraphStatusRequest {
  string executionId = 1;
  string graphId = 2;
}

message GraphStatusResponse {
  oneof status {
    Waiting waiting = 1;
    Executing executing = 2;
    Completed completed = 3;
    Failed failed = 4;
  }

  message Waiting {}
  message Executing {
    repeated string operationsCompleted = 1;  // List of completed operations
    repeated string operationsExecuting = 2;  // List of currently executing operations
    repeated string operationsWaiting = 3;  // List of waiting operations
    string message = 4;  // Human-readable message to show user
  }
  message Completed {}
  message Failed {
    string description = 1;
  }
}


// ==================== StopGraph =====================

message StopGraphRequest {
  string executionId = 1;
  string graphId = 2;
}

message StopGraphResponse {}


// ==================== ReadStdSlots =====================

message ReadStdSlotsRequest {
  string executionId = 1;
}

message ReadStdSlotsResponse {
  oneof data {
    Data stdout = 1;
    Data stderr = 2;
  }

  message Data {
    repeated string data = 1;
  }
}


// ==================== GetAvailablePools =====================

message GetAvailablePoolsRequest {
  string executionId = 1;
}

message GetAvailablePoolsResponse {
  repeated VmPoolSpec poolSpecs = 1;
}
