syntax = "proto3";

package ai.lzy.v1;

import "ai/lzy/v1/zygote.proto";
import "google/protobuf/empty.proto";


option java_outer_classname = "LzyPortalApi";
option java_package = "ai.lzy.v1";

service LzyPortal {
  rpc Start (StartPortalRequest) returns (StartPortalResponse);

  rpc Stop (google.protobuf.Empty) returns (google.protobuf.Empty);

  // returns error NOT_FOUND if portal is not active
  rpc Status (google.protobuf.Empty) returns (PortalStatus);

  rpc OpenSlots (OpenSlotsRequest) returns (OpenSlotsResponse);
  rpc SaveSnapshotSlot (SaveSnapshotSlotRequest) returns (SaveSnapshotSlotResponse);
}

message StartPortalRequest {
  string stdoutChannelId = 1;
  string stderrChannelId = 2;
}

message StartPortalResponse {
}

message PortalSlotStatus {
  Slot slot = 1;
  string connectedTo = 2;
  SlotStatus.State state = 3;
}

message PortalStatus {
  repeated PortalSlotStatus slots = 1;
}

message AmazonS3Endpoint {
  string endpoint = 1;
  string accessToken = 2;
  string secretToken = 3;
}

message AzureS3Endpoint {
  string connectionString = 1;
}

message S3Locator {
  string key = 1;
  string bucket = 2;

  oneof endpoint {
    AmazonS3Endpoint amazon = 3;
    AzureS3Endpoint azure = 4;
  }
}

message PortalSlotDesc {
  Slot slot = 1;
  string channelId = 2;

  message Snapshot {
    // external s3 storage
    S3Locator s3 = 1;

    // TODO:
    //  - support whiteboard
    //  - support kafka (streaming)
  }

  message StdOut {
    string taskId = 1;
  }

  message StdErr {
    string taskId = 1;
  }

  oneof kind {
    // snapshot slot to save into external (persistent) and internal volatile portal storage
    Snapshot snapshot = 10;
    // stdout/stderr of tasks (will be combined and transferred to portal stdout/stderr slots)
    StdOut stdout = 11;
    StdErr stderr = 12;
  }
}

message OpenSlotsRequest {
  repeated PortalSlotDesc slots = 1;
}

message OpenSlotsResponse {
  bool success = 1;
  string description = 2;
}

message SaveSnapshotSlotRequest {
  // original slot
  Slot slot = 1;
  string channelId = 2;

  // store to
  string bucketId = 3;
  oneof storage {
    AmazonS3Endpoint amazonS3 = 4;
    AzureS3Endpoint azureS3 = 5;
  }
}

message SaveSnapshotSlotResponse {
  bool success = 1;
  string description = 2;
}
