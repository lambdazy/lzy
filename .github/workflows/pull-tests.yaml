name: Test on pull request
on:
  push:
    branches: [ master, dev ]
  pull_request:
  workflow_dispatch:
jobs:

  #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml
  all-tests:
    runs-on: self-hosted
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: "Download conda"
        run: |
          echo "4ee9c3aa53329cd7a63b49877c0babb49b19b7e5af29807b793a76bdb1d362b4  miniconda.sh" > sha256.hash
          wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.11.0-Linux-x86_64.sh -O miniconda.sh

      - name: "Verify conda"
        run: sha256sum -c sha256.hash

      - name: "Install conda"
        run: bash miniconda.sh -b -p $RUNNER_TEMP/miniconda

      - name: "Create conda env"
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          conda create --name "py39" "python=3.9.7"

      - name: 'install python requirements'
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          eval "$(conda shell.bash hook)" && conda activate py39 && pip install -r lzy-servant/docker/requirements.txt

      - name: 'install pylzy'
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          eval "$(conda shell.bash hook)" && conda activate py39 && cd lzy-python/ && pip install . && cd ..

      - name: 'python-test'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          eval "$(conda shell.bash hook)" && conda activate py39 && cd lzy-python/ && python -m unittest discover tests/ && cd ..

      - name: 'java unit tests and install'
        timeout-minutes: 5
        run: mvn clean install

      - name: 'LzyDryStartupTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=LzyDryStartupTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'LzyStartupWithAvailableZygotesTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=LzyStartupWithAvailableZygotesTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'MultiSessionTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=MultiSessionTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'PyApiTest'
        timeout-minutes: 15
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=PyApiTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'RunTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=RunTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'SnapshotTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=SnapshotTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'TerminalCrashTest'
        timeout-minutes: 5
        run: |
          export PATH="$RUNNER_TEMP/miniconda/bin:$PATH"
          cd lzy-test && mvn test -Dtest=TerminalCrashTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..
      - name: 'Clear after tests'
        if: always()
        run: rm -rf /tmp/lzy* /tmp/local_modules* /tmp/resources* /tmp/term* /tmp/servant*
  #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml
