name: Test on pull request
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:

  #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml
  all-tests:
    runs-on: self-hosted
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: "Chown for checkout"
        run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/lzy/

      - name: "Checkout"
        uses: actions/checkout@v3

      - name: 'Clear before tests'
        run: |
          sudo umount -f /tmp/lzy*
          sudo umount -f /tmp/term*
          sudo rm -rf /tmp/lzy* /tmp/h2* /tmp/local_modules* /tmp/resources* /tmp/term* /tmp/servant*

      - name: 'python-test'
        timeout-minutes: 5
        run: |
          cd pylzy/
          ./scripts/gen_proto.sh
          ./scripts/run_tests.sh
         
      - name: 'upload coverage badge'
        uses: exuanbo/actions-deploy-gist@v1
        if: github.ref == 'refs/heads/master'
        with:
          token: ${{ secrets.GIST_SECRET }}
          gist_id: 0095e900fb0fcbe5575ddc3c717fb65b
          file_path: pylzy/coverage.svg
          file_type: binary
          gist_file_name: ${{ (github.head_ref || github.ref_name) }}-coverage.svg
      
      - name: 'clean after python-test'
        run: |
          cd pylzy/
          ./scripts/clean.sh
      
      - name: 'install python requirements'
        run: |
          eval "$(conda shell.bash hook)" && conda activate py39 && pip install -r servant/docker/requirements.txt

      - name: 'install pylzy'
        run: |
          cd pylzy/
          ./scripts/gen_proto.sh
          eval "$(conda shell.bash hook)" && conda activate py39 && pip install . --force-reinstall
          cd ..

      - name: 'java unit tests and install'
        timeout-minutes: 15
        run: mvn clean install

      - name: 'generate java coverage badge'
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: coverage/target/site/jacoco-aggregate/jacoco.csv
          badges-directory: coverage/target/site/jacoco-aggregate
          generate-coverage-badge: true
          coverage-badge-filename: jacoco.svg
          coverage-label: java-coverage

      - name: 'upload java coverage badge'
        uses: exuanbo/actions-deploy-gist@v1
        if: github.ref == 'refs/heads/master'
        with:
          token: ${{ secrets.GIST_SECRET }}
          gist_id: be651155cb12a8006cecdee948ce1a0a
          file_path: coverage/target/site/jacoco-aggregate/jacoco.svg
          file_type: binary
          gist_file_name: ${{ (github.head_ref || github.ref_name) }}-java-coverage.svg

      - name: 'LzyDryStartupTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=LzyDryStartupTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'LzyStartupWithAvailableZygotesTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=LzyStartupWithAvailableZygotesTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'RunTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=RunTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'TerminalCrashTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=TerminalCrashTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'ServantCrashTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=ServantCrashTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'MultiSessionTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=MultiSessionTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'SnapshotTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=SnapshotTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'build servant image'
        timeout-minutes: 15
        run: |
          BRANCH=${{ (github.head_ref || github.ref_name) }}
          SERVANT_BASE_IMAGE=$(deployment/latest-docker-image-on-branches.sh lzy-servant-base $BRANCH master)
          docker pull $SERVANT_BASE_IMAGE
          SERVANT_BASE_TAG="$(echo $SERVANT_BASE_IMAGE | awk -F: '{print $2}')"
          docker build --build-arg "SERVANT_BASE_TAG=$SERVANT_BASE_TAG" -t lzy-servant -f servant/docker/System.Dockerfile .

      - name: 'DockerServantTest'
        timeout-minutes: 15
        run: |
          BRANCH=${{ (github.head_ref || github.ref_name) }}
          ENV_IMAGE=$(deployment/latest-docker-image-on-branches.sh test-env $BRANCH master)
          cd test && mvn test -Dtest=DockerServantTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" -Dserver.baseEnvDefaultImage="$ENV_IMAGE" && cd ..

      - name: 'PyApiTest'
        timeout-minutes: 20
        run: |
          cd test && mvn test -Dtest=PyApiTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'SchedulerTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=SchedulerTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'Clean docker files'
        run: |
          docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)
          docker image prune -f
          docker volume prune -f

      - name: 'Clear after tests'
        if: always()
        run: |
          SHA=${{ github.sha }}
          sudo mkdir -p /tmp/old-lzy-logs/$SHA
          sudo tar -czvf /tmp/old-lzy-logs/$SHA/logs.tar.gz /tmp/lzy-log
          sudo umount -f /tmp/lzy*
          sudo umount -f /tmp/term*
          sudo rm -rf /tmp/lzy* /tmp/h2* /tmp/local_modules* /tmp/resources* /tmp/term* /tmp/servant*
      #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml

      - name: 'Publish Test Report'
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "**/surefire-reports/TEST-*.xml"
