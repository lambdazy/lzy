name: Test on pull request
on:
  push:
    branches: [ master, dev ]
  pull_request:
  workflow_dispatch:

jobs:

  #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml
  all-tests:
    runs-on: self-hosted
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      - name: 'python-test'
        timeout-minutes: 5
        run: |
          cd pylzy/ && ./run_tests.sh && ./clean.sh && cd ..

      - name: 'install python requirements'
        run: |
          eval "$(conda shell.bash hook)" && conda activate py39 && pip install -r servant/docker/requirements.txt

      - name: 'install pylzy'
        run: |
          eval "$(conda shell.bash hook)" && conda activate py39 && cd pylzy/ && pip install . && cd ..

      - name: 'java unit tests and install'
        timeout-minutes: 15
        run: mvn clean install -DskipTests

      - name: 'RunTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=RunTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'PyApiTest'
        timeout-minutes: 15
        run: |
          cd test && mvn test -Dtest=PyApiTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'build servant image'
        timeout-minutes: 15
        run: |
          BRANCH=${{ (github.head_ref || github.ref_name) }}
          SERVANT_BASE_IMAGE=$(deployment/latest-docker-image-on-branches.sh lzy-servant-base $BRANCH dev)
          docker pull $SERVANT_BASE_IMAGE
          SERVANT_BASE_TAG="$(echo $SERVANT_BASE_IMAGE | awk -F: '{print $2}')"
          docker build --build-arg "SERVANT_BASE_TAG=$SERVANT_BASE_TAG" -t lzy-servant -f servant/docker/System.Dockerfile .

      - name: 'DockerServantTest'
        timeout-minutes: 45
        run: |
          BRANCH=${{ (github.head_ref || github.ref_name) }}
          DEFAULT_ENV_IMAGE=$(deployment/latest-docker-image-on-branches.sh default-env $BRANCH dev)
          cd test && mvn test -Dtest=DockerServantTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" -Dserver.baseEnvDefaultImage="$DEFAULT_ENV_IMAGE" && cd ..

      - name: 'LzyDryStartupTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=LzyDryStartupTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'LzyStartupWithAvailableZygotesTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=LzyStartupWithAvailableZygotesTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'MultiSessionTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=MultiSessionTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'SnapshotTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=SnapshotTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'TerminalCrashTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=TerminalCrashTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'ServantCrashTest'
        timeout-minutes: 5
        run: |
          cd test && mvn test -Dtest=ServantCrashTest -DargLine="-Djava.util.concurrent.ForkJoinPool.common.parallelism=64" && cd ..

      - name: 'Clean docker files'
        run: |
          docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)
          docker image prune -f
          docker volume prune -f

      - uses: scacap/action-surefire-report@v1
        if: always()

      - name: 'Clear after tests'
        if: always()
        run: sudo umount -f /tmp/lzy* || sudo umount -f /tmp/term* || sudo rm -rf /tmp/lzy /tmp/lzy? /tmp/h2* /tmp/local_modules* /tmp/resources* /tmp/term* /tmp/servant*
  #### <- TODO: replace with call to reusable workflow in future: .github/workflows/reusable/pull-request-workflow.yaml
